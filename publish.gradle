
def publishLocal = true

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier "javadoc"
//    from javadoc.destinationDir
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
//            artifact(javadocJar) {
//                classifier = 'javadoc'
//            }

            pom {
                name = 'JsonPathLite'
                description = 'A lighter and more efficient implementation of JsonPath in Kotlin'
                url = 'https://github.com/codeniko/JsonPathLite'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                        url = 'https://github.com/codeniko/JsonPathLite/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'codeniko'
                        name = 'Nikolay Feldman'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/codeniko/JsonPathLite.git'
                    developerConnection = 'scm:git:ssh://git@github.com:codeniko/JsonPathLite.git'
                    url = 'https://github.com/codeniko/JsonPathLite'
                }
            }

            if (!publishLocal) {
                // create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }
                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            if (publishLocal) {
                // publish to local repo
                url = uri("$buildDir/repository")
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }

}
if (!publishLocal) {
    model {
        tasks.publishMavenJavaPublicationToMavenLocal {
            dependsOn project.tasks.signArchives
        }
        tasks.publishMavenJavaPublicationToMavenRepository {
            dependsOn project.tasks.signArchives
        }
    }
}

signing {
    required { !snapshotVersion }
    sign configurations.archives
}